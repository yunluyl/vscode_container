#!/bin/bash -e

RED='\033[1;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[1;34m'
PURPLE='\033[1;35m'
CYAN='\033[0;36m'
GRAY='\033[0;37m'
YELLOW='\033[1;33m'
NC='\033[0m'
TUSIMPLE="${ORANGE}T${GRAY}u${YELLOW}s${PURPLE}i${RED}m${BLUE}p${GREEN}l${CYAN}e${NC}"
tusimple="${ORANGE}t${GRAY}u${YELLOW}s${PURPLE}i${RED}m${BLUE}p${GREEN}l${CYAN}e${NC}"
SPIN='-\|/'

print_help () {
    echo " "
    printf "${TUSIMPLE} VSCode instances in cloud\n"
    printf "${YELLOW}[Pre-requisite]${NC}: make sure you have permission to access AWS account\n"
    echo "You can request AWS access following the link below:"
    printf "https://jira.${tusimple}.ai/servicedesk/customer/portal/2/create/160\n"
    printf "${YELLOW}[Pre-requisite]${NC}: you need to install and configure AWS CLI following the link below:\n"
    echo "https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html"
    echo "-----------------------------------------------------------------------------------------------------"
    echo "-h, --help                                  print this message"
    echo "-----------------------------------------------------------------------------------------------------"
    printf "${ORANGE}Commands:${NC}\n"
    echo "tspcode                                     create a VSCode instance or connect to an existing one"
    echo "tspcode start                               start your stopped VSCode instance"
    echo "tspcode stop                                stop your VSCode instance to save cost"
    echo "tspcode kill                                kill your VSCode instance, plase backup your data "
    echo "-----------------------------------------------------------------------------------------------------"
    printf "${ORANGE}Optional flags:${NC}\n"
    echo "--profile [AWS CLI profile]                 use a AWS CLI profile to interact with AWS"
    echo "--region [AWS region]                       choose an AWS region, default to AWS profile setting"
    echo "--instance-type [AWS EC2 type]              EC2 instance type, e.g. t2.micro, default is t3.large"
    echo "--disk-size [disk size]                     disk size of your instance, default is 200GB"
    echo "-----------------------------------------------------------------------------------------------------"
    printf "${ORANGE}Create VSCode:${NC}\n"
    echo "tspcode                                     create an instance with all default settings"
    echo "tspcode --instance-type t3.xlarge           create a t3.xlarge instance"
    echo "tspcode --profile user1 --disk-size 500     create an instance with user1 profile and 500GB disk"
    echo "-----------------------------------------------------------------------------------------------------"
    printf "${ORANGE}Stop VSCode:${NC}\n"
    echo "tspcode stop                                stop VSCode instance with all default settings"
    echo "tspcode stop --region us-west-1             stop VSCode instance in us-west-1"
    echo "-----------------------------------------------------------------------------------------------------"
    printf "${ORANGE}Start VSCode:${NC}\n"
    echo "tspcode start --region us-west-1            start VSCode instance in us-west-1"
    echo "-----------------------------------------------------------------------------------------------------"
    printf "${ORANGE}Kill VSCode:${NC}\n"
    echo "tspcode kill --profile user2                kill VSCode instance using user2's AWS profile"
    echo "-----------------------------------------------------------------------------------------------------"
    printf "${ORANGE}Documentation:${NC} https://confluence.${tusimple}.ai/pages/viewpage.action?pageId=175843745\n"
    echo "-----------------------------------------------------------------------------------------------------"
}

if [[ ( $1 == "--help" || $1 == "-h" ) && $# -eq 1 ]]; then
    print_help
    exit 0
fi

COMMAND=""
PROFILE="default"
REGION=""
INSTANCE_TYPE="t3.large"
DISK_SIZE="200"
SUBNET_ID="subnet-04147bbd79a3be98f"
SECURITY_GROUP_ID="sg-0650b69c5194d16d0"
IAM_ROLE="vscode-dev"

while [[ "$#" -ge 1 ]]; do
    case "$1" in
        --profile)
            PROFILE="$2"
            shift; shift
            ;;
        --region)
            REGION="$2"
            shift; shift
            ;;
        --instance-type)
            INSTANCE_TYPE="$2"
            shift; shift
            ;;
        --disk-size)
            DISK_SIZE="$2"
            shift; shift
            ;;
        *)
            if [[ -n "${COMMAND}" ]]; then
                printf "${RED}ERROR: command ${COMMAND} already exists, cannot take the second command $1${NC}\n"
                exit 1
            fi
            COMMAND="$1"
            shift
            ;;
    esac
done

if [[ -n "${COMMAND}" && "${COMMAND}" != "kill" &&  "${COMMAND}" != "stop" && "${COMMAND}" != "start" ]]; then
    printf "${RED}ERROR: command ${COMMAND} is not supported, run tspcode --help to see the instructions${NC}\n"
    exit 1
fi

TSP_USER_NAME="${SUDO_USER}"
if [[ "$EUID" -ne 0 ]]; then
  TSP_USER_NAME="${USER}"
fi
INST_NAME="${TSP_USER_NAME}.vscode"
if [[ -z "${REGION}" ]]; then
    echo "Using default AWS region..."
    REGION=$(aws --profile ${PROFILE} configure get region)
fi
echo "Geting AWS account information..."
ACCOUNT=$(aws --profile ${PROFILE} sts get-caller-identity --query Account --output text)

get_instance_id () {
    RET_INST_ID=$(aws --profile ${PROFILE} --region ${REGION} ec2 describe-instances \
        --filters \
        "Name=instance-state-name,Values=pending,running,stopping,stopped" \
        "Name=tag:Name,Values=${INST_NAME}" \
        --query 'Reservations[*].Instances[*].InstanceId' \
        --output text)
    echo "${RET_INST_ID}"
}

wait_three_seconds () {
    for i in {1..3}
    do
        i=$(( (i+1) %4 ))
        printf "\r${SPIN:$i:1}"
        sleep 1
    done
}

wait_ten_seconds () {
    for i in {1..10}
    do
        i=$(( (i+1) %4 ))
        printf "\r${SPIN:$i:1}"
        sleep 1
    done
}

VSCODE_URL="vscode.tusimple.ai"
write_dns () {
    grep -v "${VSCODE_URL}" /etc/hosts > /etc/hosts.new; mv /etc/hosts.new /etc/hosts
    echo "$1    ${VSCODE_URL}" >> /etc/hosts
}

if [[ "${COMMAND}" == "kill" ]]; then
    INST_ID=$(get_instance_id)
    if [[ -z "${INST_ID}" ]]; then
        printf "${RED}ERROR: ${INST_NAME} in region ${REGION} in account ${ACCOUNT} doesn't exist${NC}\n"
        exit 1
    fi
    read -p "You are killing vscode instance [${INST_NAME}] in region [${REGION}] in account [${ACCOUNT}]. Data on this instance will be lost if you didn't backup. Proceed? [Y/n]" -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        aws --profile ${PROFILE} --region "${REGION}" ec2 terminate-instances \
            --instance-ids "${INST_ID}" \
            --query 'TerminatingInstances[*].InstanceId' \
            --output text
        printf "VSCode instance has been ${YELLOW}killed${NC}\n"
    fi
    exit 0
fi

if [[ "${COMMAND}" == "stop" ]]; then
    INST_ID=$(get_instance_id)
    if [[ -z "${INST_ID}" ]]; then
        printf "${RED}ERROR: ${INST_NAME} in region ${REGION} in account ${ACCOUNT} doesn't exist${NC}\n"
        exit 1
    fi
    aws --profile ${PROFILE} --region ${REGION} ec2 stop-instances \
        --instance-ids "${INST_ID}" \
        --query 'StoppingInstances[*].InstanceId' \
        --hibernate \
        --output text
    echo "VSCode instance ${INST_NAME} in region ${REGION} is stopping..."
    while true
    do
        INST_STATE=$(aws --profile ${PROFILE} --region ${REGION} ec2 describe-instances \
            --instance-ids "${INST_ID}" \
            --filters \
            "Name=instance-state-name,Values=pending,running,stopping,stopped" \
            "Name=tag:Name,Values=${INST_NAME}" \
            --query 'Reservations[*].Instances[*].[State.Name]' \
            --output text)
        if [[ "${INST_STATE}" == "stopped" ]]; then
            break
        fi
        wait_three_seconds
    done
    printf "VSCode instance has been ${YELLOW}stopped${NC}\n"
    exit 0
fi

if [[ "$EUID" -ne 0 ]]; then
    printf "${RED}ERROR: please run with sudo${NC}\n"
    exit 1
fi
if [[ -f /.dockerenv ]]; then
    printf "${RED}ERROR: please use this tool outside of a docker container${NC}\n"
    exit 1
fi

if [[ "${COMMAND}" == "start" ]]; then
    INST_INFO=$(aws --profile ${PROFILE} --region ${REGION} ec2 describe-instances \
        --filters \
        "Name=instance-state-name,Values=pending,running,stopping,stopped" \
        "Name=tag:Name,Values=${INST_NAME}" \
        --query 'Reservations[*].Instances[*].[InstanceId,PrivateIpAddress]' \
        --output text)
    if [[ -z "${INST_INFO}" ]]; then
        printf "${RED}ERROR: ${INST_NAME} in region ${REGION} in account ${ACCOUNT} doesn't exist${NC}\n"
        exit 1
    fi
    INST_ID=$(printf "${INST_INFO}" | cut -d$'\t' -f1)
    INST_IP=$(printf "${INST_INFO}" | cut -d$'\t' -f2)
    aws --profile ${PROFILE} --region ${REGION} ec2 start-instances \
        --instance-ids "${INST_ID}" \
        --query 'StartingInstances[*].InstanceId' \
        --output text
    echo "VSCode instance ${INST_NAME} in region ${REGION} is starting..."
    while true
    do
        INST_STATE=$(aws --profile ${PROFILE} --region ${REGION} ec2 describe-instances \
            --instance-ids "${INST_ID}" \
            --filters \
            "Name=instance-state-name,Values=pending,running,stopping,stopped" \
            "Name=tag:Name,Values=${INST_NAME}" \
            --query 'Reservations[*].Instances[*].[State.Name]' \
            --output text)
        if [[ "${INST_STATE}" == "running" ]]; then
            break
        fi
        wait_three_seconds
    done
    write_dns "${INST_IP}"
    printf "VSCode instance has been ${YELLOW}started${NC}\n"
    exit 0
fi

echo "Checking if vscode instance ${INST_NAME} exists..."
PRIVATE_IP=$(aws --profile ${PROFILE} --region ${REGION} ec2 describe-instances \
    --filters \
    "Name=instance-state-name,Values=pending,running,stopping,stopped" \
    "Name=tag:Name,Values=${INST_NAME}" \
    --query 'Reservations[*].Instances[*].[PrivateIpAddress]' \
    --output text)

if [[ -n "${PRIVATE_IP}" ]]; then
    echo "Instance ${INST_NAME} already exists in region ${REGION} in account ${ACCOUNT}"
    write_dns "${PRIVATE_IP}"
    printf "Plase make sure your ${TUSIMPLE} VPN is connected, and go to https://vscode.${tusimple}.ai in a browser\n"
    exit 0
fi

read -sp 'Set login password (you will use this to login to your vscode): ' PASSWORD
echo ""
if ! [[ ${#PASSWORD} -ge 6 && "${PASSWORD}" == *[A-Z]* && "${PASSWORD}" == *[a-z]* && "${PASSWORD}" == *[0-9]* ]]; then
    printf "${RED}ERROR: password needs to be at least 6 characters long, has at least 1 digit, uppercase letter, and lower case letter${NC}\n"
    exit 1
fi
read -sp 'Confirm login password : ' CONFIRM_PASSWORD
echo ""
if [[ "${PASSWORD}" != "${CONFIRM_PASSWORD}" ]]; then
    printf "${RED}ERROR: password and confirmation doesn't match${NC}\n"
    exit 1
fi
function sha256sum_universal() { shasum -a 256 "$@" ; } && export -f sha256sum_universal
PASSWORD_HASH=$(printf "${PASSWORD}" | sha256sum_universal | cut -d' ' -f1)
USER_DATA="#!/bin/bash -e
yum update -y
amazon-linux-extras install docker
service docker start
usermod -a -G docker ec2-user
chkconfig docker on
aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 587413328198.dkr.ecr.us-west-2.amazonaws.com
docker run -d --name=code-server --init --network=host --env HASHED_PASSWORD=${PASSWORD_HASH} --restart=always --privileged -v /var/run/docker.sock:/var/run/docker.sock 587413328198.dkr.ecr.us-west-2.amazonaws.com/tsp-dev:latest"

echo "Creating new vscode instance..."
INST_INFO=$(aws --profile ${PROFILE} --region "${REGION}" ec2 run-instances \
    --image-id resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2 \
    --instance-type "${INSTANCE_TYPE}" \
    --count 1 \
    --subnet-id "${SUBNET_ID}" \
    --security-group-ids "${SECURITY_GROUP_ID}" \
    --user-data "${USER_DATA}" \
    --ebs-optimized \
    --block-device-mapping "[ { \"DeviceName\": \"/dev/xvda\", \"Ebs\": { \"VolumeSize\": "${DISK_SIZE}", \"Encrypted\": true } } ]" \
    --iam-instance-profile Name="${IAM_ROLE}" \
    --hibernation-options Configured=true \
    --key-name yunlu-test \
    --query 'Instances[*].[InstanceId,PrivateIpAddress]' \
    --output text \
    --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${INST_NAME}}]")
INST_ID=$(printf "${INST_INFO}" | cut -d$'\t' -f1)
INST_IP=$(printf "${INST_INFO}" | cut -d$'\t' -f2)
write_dns "${INST_IP}"
echo "Instance is booting up, usually takes a few minutes..."
while true
do
    INST_STATUS=$(aws --profile ${PROFILE} --region ${REGION} ec2 describe-instance-status \
        --instance-ids "${INST_ID}" \
        --filters \
        "Name=instance-state-name,Values=pending,running" \
        --query 'InstanceStatuses[*].[InstanceState.Name,InstanceStatus.Status,SystemStatus.Status]' \
        --output text)
    INST_STATE=$(printf "${INST_STATUS}" | cut -d$'\t' -f1)
    INST_STATUS_CHECK=$(printf "${INST_STATUS}" | cut -d$'\t' -f2)
    SYS_STATUS_CHECK=$(printf "${INST_STATUS}" | cut -d$'\t' -f3)
    if [[ "${INST_STATE}" == "running" && "${INST_STATUS_CHECK}" == "ok" && "${SYS_STATUS_CHECK}" == "ok" ]]; then
        break
    fi
    wait_ten_seconds
done
printf "VSCode instance has been created. Please make sure your ${TUSIMPLE} VPN is connected, and go to https://vscode.${tusimple}.ai in a browser\n"